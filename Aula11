//progama de uma arvaore AVL

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct no{
int numero;
struct no *esquerda;
struct no *direita;
int altura;
};

//Funcao que retorna a altura do no
int getAlturadoNo(struct no *raiz){
        return ((raiz == NULL)? 0 : raiz ->altura);
}

//Funcao de retorno de dois numeros
int getMaxEntreDoisNumeros(int a, int b){
    return (a > b) ? a: b;
}

//Funcao que retorna o balanco da arvore
int getBalanco(struct no *raiz){
    int retorno =0;

    if(raiz != NULL){
        retorno = (getAlturadoNo(raiz -> esquerda) - getAlturadoNo(raiz -> direita));
    }
    return retorno;
}
//Funcao que executa a rotação a esquerda
struct no *rotacaoEsquerda(struct no *raiz){
    struct no *novaRaiz = raiz -> direita;
    struct no *temp = novaRaiz -> esquerda;
    novaRaiz -> esquerda = raiz;
    raiz -> direita =temp;

    raiz -> altura  = (getMaxEntreDoisNumeros(getAlturadoNo(raiz -> esquerda), getAlturadoNo(raiz -> direita))+1);

    novaRaiz -> altura = (getMaxEntreDoisNumeros(getAlturadoNo(novaRaiz -> esquerda),getAlturadoNo(novaRaiz -> direita))+1);

    return novaRaiz;
};


struct no *rotacaoDireita(struct no *raiz){
    struct no *novaRaiz = raiz -> esquerda;
    struct no *temp = novaRaiz -> direita;
    novaRaiz -> direita = raiz;
    raiz -> esquerda =temp;

    raiz -> altura  = (getMaxEntreDoisNumeros(getAlturadoNo(raiz -> esquerda), getAlturadoNo(raiz -> direita))+1);

    novaRaiz -> altura = (getMaxEntreDoisNumeros(getAlturadoNo(novaRaiz -> esquerda),getAlturadoNo(novaRaiz -> direita))+1);

    return novaRaiz;
};

//Funcao que insere um no na arvore
struct no *inserir(struct no *raiz, int numero){
    if(raiz == NULL){
        raiz = (struct no *)malloc(sizeof(struct no));
        raiz -> numero = numero;
        raiz -> esquerda = NULL;
        raiz -> direita = NULL;
        raiz -> altura = 1;
    }else{
        if (raiz -> numero > numero){
            raiz -> esquerda = inserir(raiz -> esquerda, numero);
        }else {
            raiz -> direita = inserir(raiz -> direita, numero);
        }
    }
    raiz -> altura = (1 + getMaxEntreDoisNumeros(getAlturadoNo(raiz -> esquerda), getAlturadoNo(raiz -> direita)));

    int balanco = getBalanco(raiz);

    if ((balanco > 1)&& (numero < raiz -> esquerda -> numero)){
        raiz = rotacaoDireita(raiz);
    }

    if ((balanco < -1)&& (numero > raiz -> direita -> numero)){
        raiz = rotacaoEsquerda(raiz);
    }

    if ((balanco > 1)&& (numero > raiz -> esquerda -> numero)){
        raiz -> esquerda = rotacaoEsquerda(raiz -> esquerda);
        raiz = rotacaoDireita(raiz);
    }
    if ((balanco < -1)&& (numero < raiz -> direita -> numero)){
        raiz -> direita = rotacaoDireita (raiz -> direita);
        raiz = rotacaoEsquerda(raiz);
    }

    return raiz;

};

//Funcao de imprimir
void imprimir(struct no *raiz,char *endentacao){
    if(raiz !=NULL){
        printf("%s%d\n", endentacao, raiz -> numero);

        char *temp = (char *)malloc(1024 * sizeof(char));
        strcpy(temp,"---");
        strcat(temp, endentacao);

        imprimir(raiz -> esquerda,temp);
        imprimir(raiz -> direita,temp);

    }

}
//funcao de execucao
int main (){
    struct no *raiz = NULL;
    int i = 0;

    for (i = 0; i < 10; i++){
        raiz = inserir(raiz, i);
    }

    imprimir(raiz,"");
}


